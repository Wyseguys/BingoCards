@page "/game"

@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager nm

<PageTitle>Make a Bingo Card</PageTitle>

<h1>Lets Play a Bingo Card</h1>

    <EditForm Model="@game">
        <p>
            <label>
                Who are you?
                <InputText @bind-Value="PlayerName" />
            </label>
        </p>
        <p>
            <label>
                How Many Squares?:
                <InputSelect @bind-Value="HowManySquares">
                    <option value="9">9 (small)</option>
                    <option value="16">16 (medium)</option>
                    <option value="25">25 (large)</option>
                </InputSelect>
            </label>
        </p>
        <p>
            <label>
                Include a Free Space?:
                <InputCheckbox @bind-Value="IncludeFreeSpace" />
            </label>
            <label>
            Free Square Label?
            <InputText @bind-Value="FreeSquareLabel" />
            </label>
        </p>   
    </EditForm>
    
    <button class="btn btn-primary" @onclick="StartNewGame">Make a new Bingo Card to Play</button>

    @if(ShowGameLoad){
        <button class="btn btn-small btn-success" @onclick="LoadExistingGame">Load your existing game</button>
    }

    @if(game.Squares != null)
    {
        <Bingocard game="@game"></Bingocard>
    }



@code {
    BingoGame game = new BingoGame();
    public int HowManySquares { get; set; } = 16;
    public string PlayerName { get; set; } = "Some Bigshot";
    public string FreeSquareLabel { get; set; } = "It's been a thin slice of heaven";
    public bool IncludeFreeSpace { get; set; } = true;
    public bool ShowGameLoad { get; set; } = false;

    public void StartNewGame()
    {
        //if there is a game, ask if starting over?
        if(true)
        {
            NewBingoCard();
        }
    }

    private void NewBingoCard()
    {
        if ( ! localStorage.ContainKey("bingo-wordlist"))
        { 
            //Send them to setup a word list
            nm.NavigateTo("setup");
        }

        //destroy any previous bingo cards
        localStorage.RemoveItem("bingo-game");

        //Read the list
        string PossibleWords = localStorage.GetItem<string>("bingo-wordlist");

        if (String.IsNullOrEmpty(PossibleWords))
        {
            nm.NavigateTo("setup");
        }
        else
        {
            //Make sure we have at least 25 words
            List<string> RandomizedWords = PossibleWords.Split("|").ToList();
            
            if (RandomizedWords.Count < 25)
            {
                nm.NavigateTo("setup");
            }

            //Randomize the list
            RandomizedWords.Shuffle();

            //Pick top words from the random liust
            List<string> NewBingoCard = RandomizedWords.Take(HowManySquares).ToList();

            //Replace middle with free square if the list is odd
            if (IncludeFreeSpace)
            {
                if ((NewBingoCard.Count % 2) != 0)
                {
                    int cntSq = Convert.ToInt32(Math.Floor(Convert.ToDouble(NewBingoCard.Count / 2)));
                    NewBingoCard[cntSq] = "FREE SPACE";
                }
            }

            //Setup the Game
            game = new BingoGame(NewBingoCard, PlayerName, FreeSquareLabel);

            //Save the list to local storage
            localStorage.SetItem("bingo-game", game);
        }

    }

    private void LoadExistingGame()
    {
        if(localStorage.ContainKey("bingo-game")) 
        {
            game = localStorage.GetItem<BingoGame>("bingo-game");
            if(game != null)
            {
                PlayerName = game.Name;
                IncludeFreeSpace = game.HasFreeSpace;
                HowManySquares = game.Squares.Count;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(localStorage.ContainKey("bingo-game"))
        {
            ShowGameLoad = true;
        }
    }
}
