@page "/bingo"

@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager nm

<PageTitle>Make a Bingo Card</PageTitle>

<h1>Make a Bingo Card</h1>

<EditForm Model="@game">
<p>
    <p>
        <label>
            Who are you?
            <InputText @bind-Value="PlayerName" />
        </label>
    </p>
    <label>
        How Many Squares?:
        <InputSelect @bind-Value="HowManySquares">
            <option value="9">9 (small)</option>
            <option value="16">16 (medium)</option>
            <option value="25">25 (large)</option>
        </InputSelect>
    </label>

        
    <label>
        Include a Free Space?:
        <InputCheckbox @bind-Value="IncludeFreeSpace" />
    </label>
</p>
</EditForm>
<p>Free Square Label<input type="text" @bind=FreeSquareLabel /></p>

<button class="btn btn-primary" @onclick="NewBingoCard">Make a new Bingo Card to Play</button>
@if(@game != null)
{
    <h3>Your Bingo Card: @game.Name</h3>
    @if(game.Squares != null)
    {
        int i = 0;
        for (int rows = 0; rows < game.Rows; rows++)
        {
            <div class="row">
                @for (int cols = 0; cols < game.Columns; cols++)
                {
                    var squareNumber = i;

                    <div class="col">
                        <div data-sqid="@i" @key="i" @onclick="@(e => ToggleSquareSelected(e, squareNumber))" class="bingo-square @(game.Squares[i].Selected ? "bingo-square-selected" : "")">@game.Squares[i].Value</div>
                    </div>

                    i++;
                }
            </div>
        }
    }


    @if(@game.IsWinner)
    {
        <h1>You Won My Dude</h1>
    }


    @if (@game.IsBlackout)
    {
        <h1>You Won a Blackout My Dude</h1>
    }
}


@code {
    public BingoGame game { get; set; }
    public int HowManySquares { get; set; } = 16;
    public string PlayerName { get; set; } = "Bigshot over here";
    public string FreeSquareLabel { get; set; } = "It's been a thin slice of heaven";
    public bool IncludeFreeSpace { get; set; } = true;



    public void NewBingoCard()
    {
        //destroy any previous bingo cards
        localStorage.RemoveItem("bingo-game");

        //Read the list
        string PossibleWords = localStorage.GetItem<string>("bingo-wordlist");

        //Randomize the list
        List<string> RandomizedWords = PossibleWords.Split("|").ToList();
        RandomizedWords.Shuffle();

        //Pick top 9
        List<string> NewBingoCard = RandomizedWords.Take(HowManySquares).ToList();

        //Replace #5 with free square if the list is odd
        if(IncludeFreeSpace)
        {
            if ((NewBingoCard.Count % 2) != 0)
            {
                int cntSq = Convert.ToInt32(Math.Floor(Convert.ToDouble(NewBingoCard.Count / 2)));
                NewBingoCard[cntSq] = "FREE SPACE";
            }
        }


        //Setup the Game
        game = new BingoGame(NewBingoCard, PlayerName, FreeSquareLabel);

        //Save the list to local storage
        localStorage.SetItem("bingo-game", game);

        //Go to the card display
        //nm.NavigateTo("play");
    }

    private void ToggleSquareSelected(EventArgs e, int SquareID)
    {
        if(game != null)
        {
            game.Squares![SquareID].Selected = !game.Squares[SquareID].Selected;
            game.Updated = DateTime.Now;
            localStorage.SetItem("bingo-game", game);
        }        
    }

    protected override async Task OnInitializedAsync()
    {
        if(game == null)
        {
            game = localStorage.GetItem<BingoGame>("bingo-game");
            PlayerName = game.Name;
            IncludeFreeSpace = game.HasFreeSpace;
            HowManySquares = game.Squares.Count;
        }
    }

}
